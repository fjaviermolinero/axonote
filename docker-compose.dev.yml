version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: axonote_db_dev
    environment:
      POSTGRES_DB: medclass
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: axonote_redis_dev
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: axonote_minio_dev
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # FastAPI Backend
  api:
    build:
      context: .
      dockerfile: docker/api.Dockerfile
    container_name: axonote_api_dev
    environment:
      - APP_ENV=dev
      - DATABASE_URL=postgresql+psycopg://postgres:postgres@db:5432/medclass
      - REDIS_URL=redis://redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET=recordings
      - MINIO_SECURE=false
      - CORS_ORIGINS=http://localhost:3000
    volumes:
      - ./apps/api:/app
      - ./scripts:/scripts
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  # Celery Worker
  worker:
    build:
      context: .
      dockerfile: docker/worker.Dockerfile
    container_name: axonote_worker_dev
    environment:
      - APP_ENV=dev
      - DATABASE_URL=postgresql+psycopg://postgres:postgres@db:5432/medclass
      - REDIS_URL=redis://redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET=recordings
      - MINIO_SECURE=false
    volumes:
      - ./apps/api:/app
      - ./scripts:/scripts
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    command: ["celery", "-A", "app.workers.celery_app", "worker", "--loglevel=info"]

  # Next.js Frontend
  web:
    build:
      context: .
      dockerfile: docker/web.Dockerfile
    container_name: axonote_web_dev
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    volumes:
      - ./apps/web:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    command: ["npm", "run", "dev"]

  # LM Studio (comentado para desarrollo inicial)
  # lmstudio:
  #   image: lmstudio/server:latest
  #   container_name: axonote_lmstudio_dev
  #   ports:
  #     - "1234:1234"
  #   volumes:
  #     - ./models:/models
  #   environment:
  #     - MODEL_PATH=/models/Qwen2.5-14B-Instruct-Q4_K_M
  #   deploy:
  #     resources:
  #       devices:
  #         - driver: nvidia
  #           count: 1
  #           capabilities: [gpu]

volumes:
  postgres_data:
  redis_data:
  minio_data:

networks:
  default:
    name: axonote_dev
